{"version":3,"file":"static/js/194.f21b5c9e.chunk.js","mappings":"kQAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sIASzBC,GAAYJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAaM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,iDAKzBI,GAAWP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAoBS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6CAK/BO,EAAgBV,EAAAA,GAAAA,OAAaW,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,oM,mBCpB7BS,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAS,EAIlDC,EAAgB,SAAAF,GAAK,OAAIA,EAAMG,OAAOC,OAAQ,EAE9CC,GAAwBC,EAAAA,EAAAA,IACnC,CAACP,EAAgBG,IACjB,SAACD,EAAUE,GACT,OAAOF,EAASE,QAAO,SAAAI,GACrB,OAAOA,EAAQC,KAAKC,cAAcC,SAASP,EAAOM,cACpD,GACF,I,SCDIE,EAAgBC,EAAAA,KAAaC,MAAM,CACvCL,KAAMI,EAAAA,KACHE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,0BACZC,OAAQL,EAAAA,KAAaE,IAAI,EAAG,cAAcE,SAAS,4BAG/CE,EAAgB,CACpBV,KAAM,GACNS,OAAQ,IAGGE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,IAAYxB,GAuBjC,OACEyB,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLP,cAAeA,EACfQ,gBAAiBf,EACjBgB,SAzBa,SAACC,EAAOC,GAGRP,EAAaQ,MAAK,SAAAvB,GAAO,OAAIA,EAAQC,OAASoB,EAAMpB,IAAI,IAGrEuB,MAAM,GAADC,OAAIJ,EAAMpB,KAAI,6BAUrBY,GAASa,EAAAA,EAAAA,IAAWL,IAEpBC,EAAKK,YACP,EAMuBC,UAEnBC,EAAAA,EAAAA,MAAClD,EAAU,CAAAiD,SAAA,EACTC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,CAAO,QAELX,EAAAA,EAAAA,KAACjC,EAAS,CAACiB,KAAK,UAChBgB,EAAAA,EAAAA,KAAC9B,EAAQ,CAAC2C,UAAU,IAAI7B,KAAK,aAG/B4B,EAAAA,EAAAA,MAAA,SAAAD,SAAA,CAAO,UAELX,EAAAA,EAAAA,KAACjC,EAAS,CAAC+C,KAAK,MAAM9B,KAAK,YAC3BgB,EAAAA,EAAAA,KAAC9B,EAAQ,CAAC2C,UAAU,IAAI7B,KAAK,eAG/BgB,EAAAA,EAAAA,KAAC3B,EAAa,CAACyC,KAAK,SAAQH,SAAC,oBAIrC,ECxEaI,EAAOpD,EAAAA,GAAAA,GAASE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qDAKhBkD,EAAWrD,EAAAA,GAAAA,GAASM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,0CAKpBmD,EAAmBtD,EAAAA,GAAAA,OAAaS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,8LCPhCoD,EAAc,WACzB,IAAMC,GAAkBpB,EAAAA,EAAAA,IAAYlB,GAC9Be,GAAWC,EAAAA,EAAAA,MAMjB,OACEG,EAAAA,EAAAA,KAACe,EAAI,CAAAJ,SACa,OAAfQ,QAAe,IAAfA,OAAe,EAAfA,EAAiBC,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAItC,EAAIqC,EAAJrC,KAAMS,EAAM4B,EAAN5B,OAAM,OACvCmB,EAAAA,EAAAA,MAACI,EAAQ,CAAAL,SAAA,EACPX,EAAAA,EAAAA,KAAA,KAAAW,SAAI3B,KACJgB,EAAAA,EAAAA,KAAA,KAAAW,SAAIlB,KACJO,EAAAA,EAAAA,KAACiB,EAAgB,CAACM,QAAS,kBAVhBC,EAUiCF,EAT3C1B,GAAS6B,EAAAA,EAAAA,IAAcD,IADb,IAAAA,CAUoC,EAACb,SAAC,aAHpCW,EAMJ,KAInB,ECxBaI,EAAY/D,EAAAA,GAAAA,KAAWE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4E,UCGvB6D,EAAS,WAAO,IAADC,EACpBjD,EAAmC,QAA7BiD,GAAG7B,EAAAA,EAAAA,IAAYrB,UAAc,IAAAkD,EAAAA,EAAI,GACvChC,GAAWC,EAAAA,EAAAA,MAIjB,OACEG,EAAAA,EAAAA,KAAC0B,EAAS,CAAAf,UACRC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,CAAO,yBAELX,EAAAA,EAAAA,KAAA,SACEc,KAAK,OACL9B,KAAK,QACLoB,MAAOzB,EACPkD,SAVa,SAAAC,GAAG,OAAIlC,GAASmC,EAAAA,EAAAA,IAAUD,EAAIE,OAAO5B,OAAQ,QAepE,ECXe,SAAS6B,IACtB,IAAMrC,GAAWC,EAAAA,EAAAA,MAMjB,OAHAqC,EAAAA,EAAAA,YAAU,WACRtC,GAASuC,EAAAA,EAAAA,MACX,GAAG,CAACvC,KAEFgB,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEX,EAAAA,EAAAA,KAAA,MAAAW,SAAI,eACJX,EAAAA,EAAAA,KAACL,EAAW,KAEZK,EAAAA,EAAAA,KAAA,MAAAW,SAAI,cACJX,EAAAA,EAAAA,KAAC2B,EAAM,KACP3B,EAAAA,EAAAA,KAACkB,EAAW,MAGlB,C","sources":["components/ContactForm/ContactForm.styled.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\n  border: 1px solid #159876;\n  padding: 15px;\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nexport const FieldForm = styled(Field)`\n  margin-left: 20px;\n  padding: 5px;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: red;\n  font-size: 14px;\n`;\n\nexport const BtnAddContact = styled.button`\n  margin: 0 auto;\n  border-radius: 4px;\n  font-weight: 600;\n  width: 150px;\n  padding: 10px;\n\n  &:hover,\n  &:focus {\n    cursor: pointer;\n\n    background-color: #119875;\n  }\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilters = state => state.filter.filters;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilters],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n);\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  BtnAddContact,\n  ErrorMsg,\n  FieldForm,\n  StyledForm,\n} from './ContactForm.styled';\n\nimport { addContact } from '../../redux/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\n\nconst builderSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('This field is required'),\n  number: Yup.string().min(7, 'Too Short!').required('This field is required'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const listContacts = useSelector(selectContacts);\n\n  const onSubmit = (value, form) => {\n    // const { name, number } = value;\n\n    const isElem = listContacts.find(contact => contact.name === value.name);\n\n    if (isElem) {\n      alert(`${value.name} is already in contacts`);\n      return;\n    }\n    // email: form.elements.email.value,\n    //     password: form.elements.password.value,\n    // dispatch(addContact({\n    //       name,\n    //       number,\n    //     }));\n\n    dispatch(addContact(value));\n\n    form.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      alidationSchema={builderSchema}\n      onSubmit={onSubmit}\n    >\n      <StyledForm>\n        <label>\n          Name\n          <FieldForm name=\"name\" />\n          <ErrorMsg component=\"p\" name=\"name\" />\n        </label>\n\n        <label>\n          Number\n          <FieldForm type=\"tel\" name=\"number\" />\n          <ErrorMsg component=\"p\" name=\"number\" />\n        </label>\n\n        <BtnAddContact type=\"submit\">Add contact</BtnAddContact>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: square;\n  padding-left: 0;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 15px;\n`;\n\nexport const BtnDeleteContact = styled.button`\n  border-radius: 4px;\n  font-weight: 600;\n  height: 40px;\n  width: 80px;\n  padding: 5px;\n\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    background-color: #119875;\n  }\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { BtnDeleteContact, List, ListItem } from './ContactList.styled';\nimport { deleteContact } from '../../redux/operations';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const delContact = idContact => {\n    return dispatch(deleteContact(idContact));\n  };\n\n  return (\n    <List>\n      {visibleContacts?.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <p>{name}</p>\n          <p>{number}</p>\n          <BtnDeleteContact onClick={() => delContact(id)}>\n            Delete\n          </BtnDeleteContact>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormInput = styled.form`\n  display: inline-block;\n  width: 300px;\n  padding-left: 40px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { FormInput } from './Filter.styled';\nimport { setFilter } from 'redux/filtersSlice';\nimport { selectFilters } from 'redux/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilters) ?? '';\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => dispatch(setFilter(evt.target.value));\n\n  return (\n    <FormInput>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"input\"\n          value={filter}\n          onChange={changeFilter}\n        />\n      </label>\n    </FormInput>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n// import { Helmet } from 'react-helmet';\n// import { TaskList } from 'components/TaskList/TaskList';\n// import { TaskEditor } from 'components/TaskEditor/TaskEditor';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { selectLoading } from 'redux/tasks/selectors';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  //   const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {/* <div>{isLoading && 'Request in progress...'}</div> */}\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","FieldForm","Field","_templateObject2","ErrorMsg","ErrorMessage","_templateObject3","BtnAddContact","_templateObject4","selectContacts","state","contacts","selectFilters","filter","filters","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","builderSchema","Yup","shape","min","max","required","number","initialValues","ContactForm","dispatch","useDispatch","listContacts","useSelector","_jsx","Formik","alidationSchema","onSubmit","value","form","find","alert","concat","addContact","resetForm","children","_jsxs","component","type","List","ListItem","BtnDeleteContact","ContactList","visibleContacts","map","_ref","id","onClick","idContact","deleteContact","FormInput","Filter","_useSelector","onChange","evt","setFilter","target","Contacts","useEffect","fetchContacts"],"sourceRoot":""}